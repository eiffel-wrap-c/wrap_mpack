note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class MPACK_FUNCTIONS_API


feature -- Access

	mpack_assert_fail (message: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_assert_fail ((char const*)$message);
			]"
		end

	mpack_assert_fail_wrapper (message: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_assert_fail_wrapper ((char const*)$message);
			]"
		end

	mpack_assert_fail_format (format: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_assert_fail_format ((char const*)$format);
			]"
		end

	mpack_break_hit (message: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_break_hit ((char const*)$message);
			]"
		end

	mpack_break_hit_format (format: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_break_hit_format ((char const*)$format);
			]"
		end

	mpack_error_to_string (error: INTEGER): POINTER
		do
			Result := c_mpack_error_to_string (error)
		ensure
			instance_free: class
		end

	mpack_type_to_string (type: INTEGER): POINTER
		do
			Result := c_mpack_type_to_string (type)
		ensure
			instance_free: class
		end

	mpack_tag_cmp (left: MPACK_TAG_T_STRUCT_API; right: MPACK_TAG_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_tag_cmp (left.item, right.item)
		ensure
			instance_free: class
		end

	mpack_tag_debug_pseudo_json (tag: MPACK_TAG_T_STRUCT_API; buffer: STRING_8; buffer_size: NATURAL; a_prefix: STRING_8; prefix_size: NATURAL)
		local
			buffer_c_string: C_STRING
			a_prefix_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			create a_prefix_c_string.make (a_prefix)
			c_mpack_tag_debug_pseudo_json (tag.item, buffer_c_string.item, buffer_size, a_prefix_c_string.item, prefix_size)
		ensure
			instance_free: class
		end

	mpack_tag_debug_describe (tag: MPACK_TAG_T_STRUCT_API; buffer: STRING_8; buffer_size: NATURAL)
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			c_mpack_tag_debug_describe (tag.item, buffer_c_string.item, buffer_size)
		ensure
			instance_free: class
		end

	mpack_print_append (a_print: MPACK_PRINT_T_STRUCT_API; data: STRING_8; count: NATURAL)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_print_append (a_print.item, data_c_string.item, count)
		ensure
			instance_free: class
		end

	mpack_print_flush (a_print: MPACK_PRINT_T_STRUCT_API)
		do
			c_mpack_print_flush (a_print.item)
		ensure
			instance_free: class
		end

	mpack_print_file_callback (context: POINTER; data: STRING_8; count: NATURAL)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_print_file_callback (context, data_c_string.item, count)
		ensure
			instance_free: class
		end

	mpack_writer_track_push (writer: MPACK_WRITER_T_STRUCT_API; type: INTEGER; count: NATURAL)
		do
			c_mpack_writer_track_push (writer.item, type, count)
		ensure
			instance_free: class
		end

	mpack_writer_track_pop (writer: MPACK_WRITER_T_STRUCT_API; type: INTEGER)
		do
			c_mpack_writer_track_pop (writer.item, type)
		ensure
			instance_free: class
		end

	mpack_writer_track_element (writer: MPACK_WRITER_T_STRUCT_API)
		do
			c_mpack_writer_track_element (writer.item)
		ensure
			instance_free: class
		end

	mpack_writer_track_bytes (writer: MPACK_WRITER_T_STRUCT_API; count: NATURAL)
		do
			c_mpack_writer_track_bytes (writer.item, count)
		ensure
			instance_free: class
		end

	mpack_writer_init (writer: MPACK_WRITER_T_STRUCT_API; buffer: STRING_8; size: NATURAL)
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			c_mpack_writer_init (writer.item, buffer_c_string.item, size)
		ensure
			instance_free: class
		end

	mpack_writer_init_growable (writer: MPACK_WRITER_T_STRUCT_API; data: POINTER; size: POINTER)
		do
			c_mpack_writer_init_growable (writer.item, data, size)
		ensure
			instance_free: class
		end

	mpack_writer_init_error (writer: MPACK_WRITER_T_STRUCT_API; error: INTEGER)
		do
			c_mpack_writer_init_error (writer.item, error)
		ensure
			instance_free: class
		end

	mpack_writer_init_filename (writer: MPACK_WRITER_T_STRUCT_API; filename: STRING_8)
		local
			filename_c_string: C_STRING
		do
			create filename_c_string.make (filename)
			c_mpack_writer_init_filename (writer.item, filename_c_string.item)
		ensure
			instance_free: class
		end

	mpack_writer_init_stdfile (writer: MPACK_WRITER_T_STRUCT_API; stdfile: FILE; close_when_done: INTEGER)
		do
			c_mpack_writer_init_stdfile (writer.item, stdfile.file_pointer, close_when_done)
		ensure
			instance_free: class
		end

	mpack_writer_destroy (writer: MPACK_WRITER_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_writer_destroy (writer.item)
		ensure
			instance_free: class
		end

	mpack_writer_set_flush (writer: MPACK_WRITER_T_STRUCT_API; flush: POINTER)
		do
			c_mpack_writer_set_flush (writer.item, flush)
		ensure
			instance_free: class
		end

	mpack_writer_flush_message (writer: MPACK_WRITER_T_STRUCT_API)
		do
			c_mpack_writer_flush_message (writer.item)
		ensure
			instance_free: class
		end

	mpack_writer_flag_error (writer: MPACK_WRITER_T_STRUCT_API; error: INTEGER)
		do
			c_mpack_writer_flag_error (writer.item, error)
		ensure
			instance_free: class
		end

	mpack_write_tag (writer: MPACK_WRITER_T_STRUCT_API; tag: MPACK_TAG_T_STRUCT_API)
		do
			c_mpack_write_tag (writer.item, tag.item)
		ensure
			instance_free: class
		end

	mpack_write_i8 (writer: MPACK_WRITER_T_STRUCT_API; value: CHARACTER)
		do
			c_mpack_write_i8 (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_i16 (writer: MPACK_WRITER_T_STRUCT_API; value: INTEGER)
		do
			c_mpack_write_i16 (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_i32 (writer: MPACK_WRITER_T_STRUCT_API; value: INTEGER)
		do
			c_mpack_write_i32 (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_i64 (writer: MPACK_WRITER_T_STRUCT_API; value: INTEGER_64)
		do
			c_mpack_write_i64 (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_u8 (writer: MPACK_WRITER_T_STRUCT_API; value: CHARACTER)
		do
			c_mpack_write_u8 (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_u16 (writer: MPACK_WRITER_T_STRUCT_API; value: NATURAL)
		do
			c_mpack_write_u16 (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_u32 (writer: MPACK_WRITER_T_STRUCT_API; value: NATURAL)
		do
			c_mpack_write_u32 (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_u64 (writer: MPACK_WRITER_T_STRUCT_API; value: NATURAL_64)
		do
			c_mpack_write_u64 (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_float (writer: MPACK_WRITER_T_STRUCT_API; value: REAL)
		do
			c_mpack_write_float (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_double (writer: MPACK_WRITER_T_STRUCT_API; value: REAL_64)
		do
			c_mpack_write_double (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_bool (writer: MPACK_WRITER_T_STRUCT_API; value: INTEGER)
		do
			c_mpack_write_bool (writer.item, value)
		ensure
			instance_free: class
		end

	mpack_write_true (writer: MPACK_WRITER_T_STRUCT_API)
		do
			c_mpack_write_true (writer.item)
		ensure
			instance_free: class
		end

	mpack_write_false (writer: MPACK_WRITER_T_STRUCT_API)
		do
			c_mpack_write_false (writer.item)
		ensure
			instance_free: class
		end

	mpack_write_nil (writer: MPACK_WRITER_T_STRUCT_API)
		do
			c_mpack_write_nil (writer.item)
		ensure
			instance_free: class
		end

	mpack_write_object_bytes (writer: MPACK_WRITER_T_STRUCT_API; data: STRING_8; bytes: NATURAL)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_write_object_bytes (writer.item, data_c_string.item, bytes)
		ensure
			instance_free: class
		end

	mpack_start_array (writer: MPACK_WRITER_T_STRUCT_API; count: NATURAL)
		do
			c_mpack_start_array (writer.item, count)
		ensure
			instance_free: class
		end

	mpack_start_map (writer: MPACK_WRITER_T_STRUCT_API; count: NATURAL)
		do
			c_mpack_start_map (writer.item, count)
		ensure
			instance_free: class
		end

	mpack_write_str (writer: MPACK_WRITER_T_STRUCT_API; str: STRING_8; length: NATURAL)
		local
			str_c_string: C_STRING
		do
			create str_c_string.make (str)
			c_mpack_write_str (writer.item, str_c_string.item, length)
		ensure
			instance_free: class
		end

	mpack_write_utf8 (writer: MPACK_WRITER_T_STRUCT_API; str: STRING_8; length: NATURAL)
		local
			str_c_string: C_STRING
		do
			create str_c_string.make (str)
			c_mpack_write_utf8 (writer.item, str_c_string.item, length)
		ensure
			instance_free: class
		end

	mpack_write_cstr (writer: MPACK_WRITER_T_STRUCT_API; cstr: STRING_8)
		local
			cstr_c_string: C_STRING
		do
			create cstr_c_string.make (cstr)
			c_mpack_write_cstr (writer.item, cstr_c_string.item)
		ensure
			instance_free: class
		end

	mpack_write_cstr_or_nil (writer: MPACK_WRITER_T_STRUCT_API; cstr: STRING_8)
		local
			cstr_c_string: C_STRING
		do
			create cstr_c_string.make (cstr)
			c_mpack_write_cstr_or_nil (writer.item, cstr_c_string.item)
		ensure
			instance_free: class
		end

	mpack_write_utf8_cstr (writer: MPACK_WRITER_T_STRUCT_API; cstr: STRING_8)
		local
			cstr_c_string: C_STRING
		do
			create cstr_c_string.make (cstr)
			c_mpack_write_utf8_cstr (writer.item, cstr_c_string.item)
		ensure
			instance_free: class
		end

	mpack_write_utf8_cstr_or_nil (writer: MPACK_WRITER_T_STRUCT_API; cstr: STRING_8)
		local
			cstr_c_string: C_STRING
		do
			create cstr_c_string.make (cstr)
			c_mpack_write_utf8_cstr_or_nil (writer.item, cstr_c_string.item)
		ensure
			instance_free: class
		end

	mpack_write_bin (writer: MPACK_WRITER_T_STRUCT_API; data: STRING_8; count: NATURAL)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_write_bin (writer.item, data_c_string.item, count)
		ensure
			instance_free: class
		end

	mpack_start_str (writer: MPACK_WRITER_T_STRUCT_API; count: NATURAL)
		do
			c_mpack_start_str (writer.item, count)
		ensure
			instance_free: class
		end

	mpack_start_bin (writer: MPACK_WRITER_T_STRUCT_API; count: NATURAL)
		do
			c_mpack_start_bin (writer.item, count)
		ensure
			instance_free: class
		end

	mpack_write_bytes (writer: MPACK_WRITER_T_STRUCT_API; data: STRING_8; count: NATURAL)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_write_bytes (writer.item, data_c_string.item, count)
		ensure
			instance_free: class
		end

	mpack_reader_init (reader: MPACK_READER_T_STRUCT_API; buffer: STRING_8; size: NATURAL; count: NATURAL)
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			c_mpack_reader_init (reader.item, buffer_c_string.item, size, count)
		ensure
			instance_free: class
		end

	mpack_reader_init_error (reader: MPACK_READER_T_STRUCT_API; error: INTEGER)
		do
			c_mpack_reader_init_error (reader.item, error)
		ensure
			instance_free: class
		end

	mpack_reader_init_data (reader: MPACK_READER_T_STRUCT_API; data: STRING_8; count: NATURAL)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_reader_init_data (reader.item, data_c_string.item, count)
		ensure
			instance_free: class
		end

	mpack_reader_init_filename (reader: MPACK_READER_T_STRUCT_API; filename: STRING_8)
		local
			filename_c_string: C_STRING
		do
			create filename_c_string.make (filename)
			c_mpack_reader_init_filename (reader.item, filename_c_string.item)
		ensure
			instance_free: class
		end

	mpack_reader_init_stdfile (reader: MPACK_READER_T_STRUCT_API; stdfile: FILE; close_when_done: INTEGER)
		do
			c_mpack_reader_init_stdfile (reader.item, stdfile.file_pointer, close_when_done)
		ensure
			instance_free: class
		end

	mpack_reader_destroy (reader: MPACK_READER_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_reader_destroy (reader.item)
		ensure
			instance_free: class
		end

	mpack_reader_set_fill (reader: MPACK_READER_T_STRUCT_API; fill: POINTER)
		do
			c_mpack_reader_set_fill (reader.item, fill)
		ensure
			instance_free: class
		end

	mpack_reader_set_skip (reader: MPACK_READER_T_STRUCT_API; skip: POINTER)
		do
			c_mpack_reader_set_skip (reader.item, skip)
		ensure
			instance_free: class
		end

	mpack_reader_flag_error (reader: MPACK_READER_T_STRUCT_API; error: INTEGER)
		do
			c_mpack_reader_flag_error (reader.item, error)
		ensure
			instance_free: class
		end

	mpack_reader_remaining (reader: MPACK_READER_T_STRUCT_API; data: POINTER): NATURAL
		do
			Result := c_mpack_reader_remaining (reader.item, data)
		ensure
			instance_free: class
		end

	mpack_read_tag (reader: MPACK_READER_T_STRUCT_API): detachable MPACK_TAG_T_STRUCT_API
		do
			if attached c_mpack_read_tag (reader.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_peek_tag (reader: MPACK_READER_T_STRUCT_API): detachable MPACK_TAG_T_STRUCT_API
		do
			if attached c_mpack_peek_tag (reader.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_skip_bytes (reader: MPACK_READER_T_STRUCT_API; count: NATURAL)
		do
			c_mpack_skip_bytes (reader.item, count)
		ensure
			instance_free: class
		end

	mpack_read_bytes (reader: MPACK_READER_T_STRUCT_API; p: STRING_8; count: NATURAL)
		local
			p_c_string: C_STRING
		do
			create p_c_string.make (p)
			c_mpack_read_bytes (reader.item, p_c_string.item, count)
		ensure
			instance_free: class
		end

	mpack_read_utf8 (reader: MPACK_READER_T_STRUCT_API; p: STRING_8; byte_count: NATURAL)
		local
			p_c_string: C_STRING
		do
			create p_c_string.make (p)
			c_mpack_read_utf8 (reader.item, p_c_string.item, byte_count)
		ensure
			instance_free: class
		end

	mpack_read_cstr (reader: MPACK_READER_T_STRUCT_API; buf: STRING_8; buffer_size: NATURAL; byte_count: NATURAL)
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			c_mpack_read_cstr (reader.item, buf_c_string.item, buffer_size, byte_count)
		ensure
			instance_free: class
		end

	mpack_read_utf8_cstr (reader: MPACK_READER_T_STRUCT_API; buf: STRING_8; buffer_size: NATURAL; byte_count: NATURAL)
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			c_mpack_read_utf8_cstr (reader.item, buf_c_string.item, buffer_size, byte_count)
		ensure
			instance_free: class
		end

	mpack_read_bytes_alloc_impl (reader: MPACK_READER_T_STRUCT_API; count: NATURAL; null_terminated: INTEGER): POINTER
		do
			Result := c_mpack_read_bytes_alloc_impl (reader.item, count, null_terminated)
		ensure
			instance_free: class
		end

	mpack_read_bytes_inplace (reader: MPACK_READER_T_STRUCT_API; count: NATURAL): POINTER
		do
			Result := c_mpack_read_bytes_inplace (reader.item, count)
		ensure
			instance_free: class
		end

	mpack_read_utf8_inplace (reader: MPACK_READER_T_STRUCT_API; count: NATURAL): POINTER
		do
			Result := c_mpack_read_utf8_inplace (reader.item, count)
		ensure
			instance_free: class
		end

	mpack_done_type (reader: MPACK_READER_T_STRUCT_API; type: INTEGER)
		do
			c_mpack_done_type (reader.item, type)
		ensure
			instance_free: class
		end

	mpack_discard (reader: MPACK_READER_T_STRUCT_API)
		do
			c_mpack_discard (reader.item)
		ensure
			instance_free: class
		end

	mpack_print_data_to_buffer (data: POINTER; data_size: NATURAL; buffer: POINTER; buffer_size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_print_data_to_buffer ((char const*)$data, (size_t)$data_size, (char*)$buffer, (size_t)$buffer_size);
			]"
		end

	mpack_print_data_to_callback (data: STRING_8; size: NATURAL; callback: POINTER; context: POINTER)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_print_data_to_callback (data_c_string.item, size, callback, context)
		ensure
			instance_free: class
		end

	mpack_print_data_to_file (data: STRING_8; len: NATURAL; file: FILE)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_print_data_to_file (data_c_string.item, len, file.file_pointer)
		ensure
			instance_free: class
		end

	mpack_print_stdfile_to_callback (file: FILE; callback: POINTER; context: POINTER)
		do
			c_mpack_print_stdfile_to_callback (file.file_pointer, callback, context)
		ensure
			instance_free: class
		end

	mpack_expect_u8 (reader: MPACK_READER_T_STRUCT_API): CHARACTER
		do
			Result := c_mpack_expect_u8 (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_u16 (reader: MPACK_READER_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_expect_u16 (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_u32 (reader: MPACK_READER_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_expect_u32 (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_u64 (reader: MPACK_READER_T_STRUCT_API): NATURAL_64
		do
			Result := c_mpack_expect_u64 (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_i8 (reader: MPACK_READER_T_STRUCT_API): CHARACTER
		do
			Result := c_mpack_expect_i8 (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_i16 (reader: MPACK_READER_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_expect_i16 (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_i32 (reader: MPACK_READER_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_expect_i32 (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_i64 (reader: MPACK_READER_T_STRUCT_API): INTEGER_64
		do
			Result := c_mpack_expect_i64 (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_float (reader: MPACK_READER_T_STRUCT_API): REAL
		do
			Result := c_mpack_expect_float (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_double (reader: MPACK_READER_T_STRUCT_API): REAL_64
		do
			Result := c_mpack_expect_double (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_float_strict (reader: MPACK_READER_T_STRUCT_API): REAL
		do
			Result := c_mpack_expect_float_strict (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_double_strict (reader: MPACK_READER_T_STRUCT_API): REAL_64
		do
			Result := c_mpack_expect_double_strict (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_u8_range (reader: MPACK_READER_T_STRUCT_API; min_value: CHARACTER; max_value: CHARACTER): CHARACTER
		do
			Result := c_mpack_expect_u8_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_u16_range (reader: MPACK_READER_T_STRUCT_API; min_value: NATURAL; max_value: NATURAL): NATURAL
		do
			Result := c_mpack_expect_u16_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_u32_range (reader: MPACK_READER_T_STRUCT_API; min_value: NATURAL; max_value: NATURAL): NATURAL
		do
			Result := c_mpack_expect_u32_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_u64_range (reader: MPACK_READER_T_STRUCT_API; min_value: NATURAL_64; max_value: NATURAL_64): NATURAL_64
		do
			Result := c_mpack_expect_u64_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_i8_range (reader: MPACK_READER_T_STRUCT_API; min_value: CHARACTER; max_value: CHARACTER): CHARACTER
		do
			Result := c_mpack_expect_i8_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_i16_range (reader: MPACK_READER_T_STRUCT_API; min_value: INTEGER; max_value: INTEGER): INTEGER
		do
			Result := c_mpack_expect_i16_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_i32_range (reader: MPACK_READER_T_STRUCT_API; min_value: INTEGER; max_value: INTEGER): INTEGER
		do
			Result := c_mpack_expect_i32_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_i64_range (reader: MPACK_READER_T_STRUCT_API; min_value: INTEGER_64; max_value: INTEGER_64): INTEGER_64
		do
			Result := c_mpack_expect_i64_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_float_range (reader: MPACK_READER_T_STRUCT_API; min_value: REAL; max_value: REAL): REAL
		do
			Result := c_mpack_expect_float_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_double_range (reader: MPACK_READER_T_STRUCT_API; min_value: REAL_64; max_value: REAL_64): REAL_64
		do
			Result := c_mpack_expect_double_range (reader.item, min_value, max_value)
		ensure
			instance_free: class
		end

	mpack_expect_uint_match (reader: MPACK_READER_T_STRUCT_API; value: NATURAL_64)
		do
			c_mpack_expect_uint_match (reader.item, value)
		ensure
			instance_free: class
		end

	mpack_expect_int_match (reader: MPACK_READER_T_STRUCT_API; value: INTEGER_64)
		do
			c_mpack_expect_int_match (reader.item, value)
		ensure
			instance_free: class
		end

	mpack_expect_nil (reader: MPACK_READER_T_STRUCT_API)
		do
			c_mpack_expect_nil (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_bool (reader: MPACK_READER_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_expect_bool (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_true (reader: MPACK_READER_T_STRUCT_API)
		do
			c_mpack_expect_true (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_false (reader: MPACK_READER_T_STRUCT_API)
		do
			c_mpack_expect_false (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_map (reader: MPACK_READER_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_expect_map (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_map_range (reader: MPACK_READER_T_STRUCT_API; min_count: NATURAL; max_count: NATURAL): NATURAL
		do
			Result := c_mpack_expect_map_range (reader.item, min_count, max_count)
		ensure
			instance_free: class
		end

	mpack_expect_map_match (reader: MPACK_READER_T_STRUCT_API; count: NATURAL)
		do
			c_mpack_expect_map_match (reader.item, count)
		ensure
			instance_free: class
		end

	mpack_expect_map_or_nil (reader: MPACK_READER_T_STRUCT_API; count: POINTER): INTEGER
		do
			Result := c_mpack_expect_map_or_nil (reader.item, count)
		ensure
			instance_free: class
		end

	mpack_expect_map_max_or_nil (reader: MPACK_READER_T_STRUCT_API; max_count: NATURAL; count: POINTER): INTEGER
		do
			Result := c_mpack_expect_map_max_or_nil (reader.item, max_count, count)
		ensure
			instance_free: class
		end

	mpack_expect_array (reader: MPACK_READER_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_expect_array (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_array_range (reader: MPACK_READER_T_STRUCT_API; min_count: NATURAL; max_count: NATURAL): NATURAL
		do
			Result := c_mpack_expect_array_range (reader.item, min_count, max_count)
		ensure
			instance_free: class
		end

	mpack_expect_array_match (reader: MPACK_READER_T_STRUCT_API; count: NATURAL)
		do
			c_mpack_expect_array_match (reader.item, count)
		ensure
			instance_free: class
		end

	mpack_expect_array_or_nil (reader: MPACK_READER_T_STRUCT_API; count: POINTER): INTEGER
		do
			Result := c_mpack_expect_array_or_nil (reader.item, count)
		ensure
			instance_free: class
		end

	mpack_expect_array_max_or_nil (reader: MPACK_READER_T_STRUCT_API; max_count: NATURAL; count: POINTER): INTEGER
		do
			Result := c_mpack_expect_array_max_or_nil (reader.item, max_count, count)
		ensure
			instance_free: class
		end

	mpack_expect_array_alloc_impl (reader: MPACK_READER_T_STRUCT_API; element_size: NATURAL; max_count: NATURAL; out_count: POINTER; allow_nil: INTEGER): POINTER
		do
			Result := c_mpack_expect_array_alloc_impl (reader.item, element_size, max_count, out_count, allow_nil)
		ensure
			instance_free: class
		end

	mpack_expect_str (reader: MPACK_READER_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_expect_str (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_str_buf (reader: MPACK_READER_T_STRUCT_API; buf: STRING_8; bufsize: NATURAL): NATURAL
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			Result := c_mpack_expect_str_buf (reader.item, buf_c_string.item, bufsize)
		ensure
			instance_free: class
		end

	mpack_expect_utf8 (reader: MPACK_READER_T_STRUCT_API; buf: STRING_8; bufsize: NATURAL): NATURAL
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			Result := c_mpack_expect_utf8 (reader.item, buf_c_string.item, bufsize)
		ensure
			instance_free: class
		end

	mpack_expect_str_match (reader: MPACK_READER_T_STRUCT_API; str: STRING_8; length: NATURAL)
		local
			str_c_string: C_STRING
		do
			create str_c_string.make (str)
			c_mpack_expect_str_match (reader.item, str_c_string.item, length)
		ensure
			instance_free: class
		end

	mpack_expect_cstr (reader: MPACK_READER_T_STRUCT_API; buf: STRING_8; size: NATURAL)
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			c_mpack_expect_cstr (reader.item, buf_c_string.item, size)
		ensure
			instance_free: class
		end

	mpack_expect_utf8_cstr (reader: MPACK_READER_T_STRUCT_API; buf: STRING_8; size: NATURAL)
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			c_mpack_expect_utf8_cstr (reader.item, buf_c_string.item, size)
		ensure
			instance_free: class
		end

	mpack_expect_cstr_alloc (reader: MPACK_READER_T_STRUCT_API; maxsize: NATURAL): POINTER
		do
			Result := c_mpack_expect_cstr_alloc (reader.item, maxsize)
		ensure
			instance_free: class
		end

	mpack_expect_utf8_cstr_alloc (reader: MPACK_READER_T_STRUCT_API; maxsize: NATURAL): POINTER
		do
			Result := c_mpack_expect_utf8_cstr_alloc (reader.item, maxsize)
		ensure
			instance_free: class
		end

	mpack_expect_bin (reader: MPACK_READER_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_expect_bin (reader.item)
		ensure
			instance_free: class
		end

	mpack_expect_bin_buf (reader: MPACK_READER_T_STRUCT_API; buf: STRING_8; size: NATURAL): NATURAL
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			Result := c_mpack_expect_bin_buf (reader.item, buf_c_string.item, size)
		ensure
			instance_free: class
		end

	mpack_expect_bin_size_buf (reader: MPACK_READER_T_STRUCT_API; buf: STRING_8; size: NATURAL)
		local
			buf_c_string: C_STRING
		do
			create buf_c_string.make (buf)
			c_mpack_expect_bin_size_buf (reader.item, buf_c_string.item, size)
		ensure
			instance_free: class
		end

	mpack_expect_bin_alloc (reader: MPACK_READER_T_STRUCT_API; maxsize: NATURAL; size: POINTER): POINTER
		do
			Result := c_mpack_expect_bin_alloc (reader.item, maxsize, size)
		ensure
			instance_free: class
		end

	mpack_expect_tag (reader: MPACK_READER_T_STRUCT_API; tag: MPACK_TAG_T_STRUCT_API)
		do
			c_mpack_expect_tag (reader.item, tag.item)
		ensure
			instance_free: class
		end

	mpack_expect_enum (reader: MPACK_READER_T_STRUCT_API; strings: MANAGED_POINTER; count: NATURAL): NATURAL
		do
			Result := c_mpack_expect_enum (reader.item, strings.item, count)
		ensure
			instance_free: class
		end

	mpack_expect_enum_optional (reader: MPACK_READER_T_STRUCT_API; strings: MANAGED_POINTER; count: NATURAL): NATURAL
		do
			Result := c_mpack_expect_enum_optional (reader.item, strings.item, count)
		ensure
			instance_free: class
		end

	mpack_expect_key_uint (reader: MPACK_READER_T_STRUCT_API; found: MANAGED_POINTER; count: NATURAL): NATURAL
		do
			Result := c_mpack_expect_key_uint (reader.item, found.item, count)
		ensure
			instance_free: class
		end

	mpack_expect_key_cstr (reader: MPACK_READER_T_STRUCT_API; keys: MANAGED_POINTER; found: MANAGED_POINTER; count: NATURAL): NATURAL
		do
			Result := c_mpack_expect_key_cstr (reader.item, keys.item, found.item, count)
		ensure
			instance_free: class
		end

	mpack_tree_init_data (tree: MPACK_TREE_T_STRUCT_API; data: STRING_8; length: NATURAL)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_tree_init_data (tree.item, data_c_string.item, length)
		ensure
			instance_free: class
		end

	mpack_tree_init_stream (tree: MPACK_TREE_T_STRUCT_API; read_fn: POINTER; context: POINTER; max_message_size: NATURAL; max_message_nodes: NATURAL)
		do
			c_mpack_tree_init_stream (tree.item, read_fn, context, max_message_size, max_message_nodes)
		ensure
			instance_free: class
		end

	mpack_tree_init_pool (tree: MPACK_TREE_T_STRUCT_API; data: STRING_8; length: NATURAL; node_pool: MPACK_NODE_DATA_T_STRUCT_API; node_pool_count: NATURAL)
		local
			data_c_string: C_STRING
		do
			create data_c_string.make (data)
			c_mpack_tree_init_pool (tree.item, data_c_string.item, length, node_pool.item, node_pool_count)
		ensure
			instance_free: class
		end

	mpack_tree_init_error (tree: MPACK_TREE_T_STRUCT_API; error: INTEGER)
		do
			c_mpack_tree_init_error (tree.item, error)
		ensure
			instance_free: class
		end

	mpack_tree_init_filename (tree: MPACK_TREE_T_STRUCT_API; filename: STRING_8; max_bytes: NATURAL)
		local
			filename_c_string: C_STRING
		do
			create filename_c_string.make (filename)
			c_mpack_tree_init_filename (tree.item, filename_c_string.item, max_bytes)
		ensure
			instance_free: class
		end

	mpack_tree_init_stdfile (tree: MPACK_TREE_T_STRUCT_API; stdfile: FILE; max_bytes: NATURAL; close_when_done: INTEGER)
		do
			c_mpack_tree_init_stdfile (tree.item, stdfile.file_pointer, max_bytes, close_when_done)
		ensure
			instance_free: class
		end

	mpack_tree_set_limits (tree: MPACK_TREE_T_STRUCT_API; max_message_size: NATURAL; max_message_nodes: NATURAL)
		do
			c_mpack_tree_set_limits (tree.item, max_message_size, max_message_nodes)
		ensure
			instance_free: class
		end

	mpack_tree_parse (tree: MPACK_TREE_T_STRUCT_API)
		do
			c_mpack_tree_parse (tree.item)
		ensure
			instance_free: class
		end

	mpack_tree_try_parse (tree: MPACK_TREE_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_tree_try_parse (tree.item)
		ensure
			instance_free: class
		end

	mpack_tree_root (tree: MPACK_TREE_T_STRUCT_API): detachable MPACK_NODE_T_STRUCT_API
		do
			if attached c_mpack_tree_root (tree.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_tree_destroy (tree: MPACK_TREE_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_tree_destroy (tree.item)
		ensure
			instance_free: class
		end

	mpack_tree_flag_error (tree: MPACK_TREE_T_STRUCT_API; error: INTEGER)
		do
			c_mpack_tree_flag_error (tree.item, error)
		ensure
			instance_free: class
		end

	mpack_node_flag_error (node: MPACK_NODE_T_STRUCT_API; error: INTEGER)
		do
			c_mpack_node_flag_error (node.item, error)
		ensure
			instance_free: class
		end

	mpack_node_tag (node: MPACK_NODE_T_STRUCT_API): detachable MPACK_TAG_T_STRUCT_API
		do
			if attached c_mpack_node_tag (node.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_print_to_buffer (node: MPACK_NODE_T_STRUCT_API; buffer: STRING_8; buffer_size: NATURAL)
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			c_mpack_node_print_to_buffer (node.item, buffer_c_string.item, buffer_size)
		ensure
			instance_free: class
		end

	mpack_node_print_to_callback (node: MPACK_NODE_T_STRUCT_API; callback: POINTER; context: POINTER)
		do
			c_mpack_node_print_to_callback (node.item, callback, context)
		ensure
			instance_free: class
		end

	mpack_node_print_to_file (node: MPACK_NODE_T_STRUCT_API; file: FILE)
		do
			c_mpack_node_print_to_file (node.item, file.file_pointer)
		ensure
			instance_free: class
		end

	mpack_node_type (node: MPACK_NODE_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_node_type (node.item)
		ensure
			instance_free: class
		end

	mpack_node_is_nil (node: MPACK_NODE_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_node_is_nil (node.item)
		ensure
			instance_free: class
		end

	mpack_node_is_missing (node: MPACK_NODE_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_node_is_missing (node.item)
		ensure
			instance_free: class
		end

	mpack_node_nil (node: MPACK_NODE_T_STRUCT_API)
		do
			c_mpack_node_nil (node.item)
		ensure
			instance_free: class
		end

	mpack_node_missing (node: MPACK_NODE_T_STRUCT_API)
		do
			c_mpack_node_missing (node.item)
		ensure
			instance_free: class
		end

	mpack_node_bool (node: MPACK_NODE_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_node_bool (node.item)
		ensure
			instance_free: class
		end

	mpack_node_true (node: MPACK_NODE_T_STRUCT_API)
		do
			c_mpack_node_true (node.item)
		ensure
			instance_free: class
		end

	mpack_node_false (node: MPACK_NODE_T_STRUCT_API)
		do
			c_mpack_node_false (node.item)
		ensure
			instance_free: class
		end

	mpack_node_u8 (node: MPACK_NODE_T_STRUCT_API): CHARACTER
		do
			Result := c_mpack_node_u8 (node.item)
		ensure
			instance_free: class
		end

	mpack_node_i8 (node: MPACK_NODE_T_STRUCT_API): CHARACTER
		do
			Result := c_mpack_node_i8 (node.item)
		ensure
			instance_free: class
		end

	mpack_node_u16 (node: MPACK_NODE_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_node_u16 (node.item)
		ensure
			instance_free: class
		end

	mpack_node_i16 (node: MPACK_NODE_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_node_i16 (node.item)
		ensure
			instance_free: class
		end

	mpack_node_u32 (node: MPACK_NODE_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_node_u32 (node.item)
		ensure
			instance_free: class
		end

	mpack_node_i32 (node: MPACK_NODE_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_node_i32 (node.item)
		ensure
			instance_free: class
		end

	mpack_node_u64 (node: MPACK_NODE_T_STRUCT_API): NATURAL_64
		do
			Result := c_mpack_node_u64 (node.item)
		ensure
			instance_free: class
		end

	mpack_node_i64 (node: MPACK_NODE_T_STRUCT_API): INTEGER_64
		do
			Result := c_mpack_node_i64 (node.item)
		ensure
			instance_free: class
		end

	mpack_node_uint (node: MPACK_NODE_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_node_uint (node.item)
		ensure
			instance_free: class
		end

	mpack_node_int (node: MPACK_NODE_T_STRUCT_API): INTEGER
		do
			Result := c_mpack_node_int (node.item)
		ensure
			instance_free: class
		end

	mpack_node_float (node: MPACK_NODE_T_STRUCT_API): REAL
		do
			Result := c_mpack_node_float (node.item)
		ensure
			instance_free: class
		end

	mpack_node_double (node: MPACK_NODE_T_STRUCT_API): REAL_64
		do
			Result := c_mpack_node_double (node.item)
		ensure
			instance_free: class
		end

	mpack_node_float_strict (node: MPACK_NODE_T_STRUCT_API): REAL
		do
			Result := c_mpack_node_float_strict (node.item)
		ensure
			instance_free: class
		end

	mpack_node_double_strict (node: MPACK_NODE_T_STRUCT_API): REAL_64
		do
			Result := c_mpack_node_double_strict (node.item)
		ensure
			instance_free: class
		end

	mpack_node_check_utf8 (node: MPACK_NODE_T_STRUCT_API)
		do
			c_mpack_node_check_utf8 (node.item)
		ensure
			instance_free: class
		end

	mpack_node_check_utf8_cstr (node: MPACK_NODE_T_STRUCT_API)
		do
			c_mpack_node_check_utf8_cstr (node.item)
		ensure
			instance_free: class
		end

	mpack_node_bin_size (node: MPACK_NODE_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_node_bin_size (node.item)
		ensure
			instance_free: class
		end

	mpack_node_data_len (node: MPACK_NODE_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_node_data_len (node.item)
		ensure
			instance_free: class
		end

	mpack_node_strlen (node: MPACK_NODE_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_node_strlen (node.item)
		ensure
			instance_free: class
		end

	mpack_node_str (node: MPACK_NODE_T_STRUCT_API): POINTER
		do
			Result := c_mpack_node_str (node.item)
		ensure
			instance_free: class
		end

	mpack_node_data (node: MPACK_NODE_T_STRUCT_API): POINTER
		do
			Result := c_mpack_node_data (node.item)
		ensure
			instance_free: class
		end

	mpack_node_bin_data (node: MPACK_NODE_T_STRUCT_API): POINTER
		do
			Result := c_mpack_node_bin_data (node.item)
		ensure
			instance_free: class
		end

	mpack_node_copy_data (node: MPACK_NODE_T_STRUCT_API; buffer: STRING_8; bufsize: NATURAL): NATURAL
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_mpack_node_copy_data (node.item, buffer_c_string.item, bufsize)
		ensure
			instance_free: class
		end

	mpack_node_copy_utf8 (node: MPACK_NODE_T_STRUCT_API; buffer: STRING_8; bufsize: NATURAL): NATURAL
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			Result := c_mpack_node_copy_utf8 (node.item, buffer_c_string.item, bufsize)
		ensure
			instance_free: class
		end

	mpack_node_copy_cstr (node: MPACK_NODE_T_STRUCT_API; buffer: STRING_8; size: NATURAL)
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			c_mpack_node_copy_cstr (node.item, buffer_c_string.item, size)
		ensure
			instance_free: class
		end

	mpack_node_copy_utf8_cstr (node: MPACK_NODE_T_STRUCT_API; buffer: STRING_8; size: NATURAL)
		local
			buffer_c_string: C_STRING
		do
			create buffer_c_string.make (buffer)
			c_mpack_node_copy_utf8_cstr (node.item, buffer_c_string.item, size)
		ensure
			instance_free: class
		end

	mpack_node_data_alloc (node: MPACK_NODE_T_STRUCT_API; maxsize: NATURAL): POINTER
		do
			Result := c_mpack_node_data_alloc (node.item, maxsize)
		ensure
			instance_free: class
		end

	mpack_node_cstr_alloc (node: MPACK_NODE_T_STRUCT_API; maxsize: NATURAL): POINTER
		do
			Result := c_mpack_node_cstr_alloc (node.item, maxsize)
		ensure
			instance_free: class
		end

	mpack_node_utf8_cstr_alloc (node: MPACK_NODE_T_STRUCT_API; maxsize: NATURAL): POINTER
		do
			Result := c_mpack_node_utf8_cstr_alloc (node.item, maxsize)
		ensure
			instance_free: class
		end

	mpack_node_enum (node: MPACK_NODE_T_STRUCT_API; strings: MANAGED_POINTER; count: NATURAL): NATURAL
		do
			Result := c_mpack_node_enum (node.item, strings.item, count)
		ensure
			instance_free: class
		end

	mpack_node_enum_optional (node: MPACK_NODE_T_STRUCT_API; strings: MANAGED_POINTER; count: NATURAL): NATURAL
		do
			Result := c_mpack_node_enum_optional (node.item, strings.item, count)
		ensure
			instance_free: class
		end

	mpack_node_array_length (node: MPACK_NODE_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_node_array_length (node.item)
		ensure
			instance_free: class
		end

	mpack_node_array_at (node: MPACK_NODE_T_STRUCT_API; index: NATURAL): detachable MPACK_NODE_T_STRUCT_API
		do
			if attached c_mpack_node_array_at (node.item, index) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_count (node: MPACK_NODE_T_STRUCT_API): NATURAL
		do
			Result := c_mpack_node_map_count (node.item)
		ensure
			instance_free: class
		end

	mpack_node_map_key_at (node: MPACK_NODE_T_STRUCT_API; index: NATURAL): detachable MPACK_NODE_T_STRUCT_API
		do
			if attached c_mpack_node_map_key_at (node.item, index) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_value_at (node: MPACK_NODE_T_STRUCT_API; index: NATURAL): detachable MPACK_NODE_T_STRUCT_API
		do
			if attached c_mpack_node_map_value_at (node.item, index) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_int (node: MPACK_NODE_T_STRUCT_API; num: INTEGER_64): detachable MPACK_NODE_T_STRUCT_API
		do
			if attached c_mpack_node_map_int (node.item, num) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_int_optional (node: MPACK_NODE_T_STRUCT_API; num: INTEGER_64): detachable MPACK_NODE_T_STRUCT_API
		do
			if attached c_mpack_node_map_int_optional (node.item, num) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_uint (node: MPACK_NODE_T_STRUCT_API; num: NATURAL_64): detachable MPACK_NODE_T_STRUCT_API
		do
			if attached c_mpack_node_map_uint (node.item, num) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_uint_optional (node: MPACK_NODE_T_STRUCT_API; num: NATURAL_64): detachable MPACK_NODE_T_STRUCT_API
		do
			if attached c_mpack_node_map_uint_optional (node.item, num) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_str (node: MPACK_NODE_T_STRUCT_API; str: STRING_8; length: NATURAL): detachable MPACK_NODE_T_STRUCT_API
		local
			str_c_string: C_STRING
		do
			create str_c_string.make (str)
			if attached c_mpack_node_map_str (node.item, str_c_string.item, length) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_str_optional (node: MPACK_NODE_T_STRUCT_API; str: STRING_8; length: NATURAL): detachable MPACK_NODE_T_STRUCT_API
		local
			str_c_string: C_STRING
		do
			create str_c_string.make (str)
			if attached c_mpack_node_map_str_optional (node.item, str_c_string.item, length) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_cstr (node: MPACK_NODE_T_STRUCT_API; cstr: STRING_8): detachable MPACK_NODE_T_STRUCT_API
		local
			cstr_c_string: C_STRING
		do
			create cstr_c_string.make (cstr)
			if attached c_mpack_node_map_cstr (node.item, cstr_c_string.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_cstr_optional (node: MPACK_NODE_T_STRUCT_API; cstr: STRING_8): detachable MPACK_NODE_T_STRUCT_API
		local
			cstr_c_string: C_STRING
		do
			create cstr_c_string.make (cstr)
			if attached c_mpack_node_map_cstr_optional (node.item, cstr_c_string.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	mpack_node_map_contains_int (node: MPACK_NODE_T_STRUCT_API; num: INTEGER_64): INTEGER
		do
			Result := c_mpack_node_map_contains_int (node.item, num)
		ensure
			instance_free: class
		end

	mpack_node_map_contains_uint (node: MPACK_NODE_T_STRUCT_API; num: NATURAL_64): INTEGER
		do
			Result := c_mpack_node_map_contains_uint (node.item, num)
		ensure
			instance_free: class
		end

	mpack_node_map_contains_str (node: MPACK_NODE_T_STRUCT_API; str: STRING_8; length: NATURAL): INTEGER
		local
			str_c_string: C_STRING
		do
			create str_c_string.make (str)
			Result := c_mpack_node_map_contains_str (node.item, str_c_string.item, length)
		ensure
			instance_free: class
		end

	mpack_node_map_contains_cstr (node: MPACK_NODE_T_STRUCT_API; cstr: STRING_8): INTEGER
		local
			cstr_c_string: C_STRING
		do
			create cstr_c_string.make (cstr)
			Result := c_mpack_node_map_contains_cstr (node.item, cstr_c_string.item)
		ensure
			instance_free: class
		end

feature -- Externals

	c_mpack_error_to_string (error: INTEGER): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_error_to_string ((mpack_error_t)$error);
			]"
		end

	c_mpack_type_to_string (type: INTEGER): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_type_to_string ((mpack_type_t)$type);
			]"
		end

	c_mpack_tag_cmp (left: POINTER; right: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_tag_cmp (*(mpack_tag_t*)$left, *(mpack_tag_t*)$right);
			]"
		end

	c_mpack_tag_debug_pseudo_json (tag: POINTER; buffer: POINTER; buffer_size: NATURAL; a_prefix: POINTER; prefix_size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tag_debug_pseudo_json (*(mpack_tag_t*)$tag, (char*)$buffer, (size_t)$buffer_size, (char const*)$a_prefix, (size_t)$prefix_size);
			]"
		end

	c_mpack_tag_debug_describe (tag: POINTER; buffer: POINTER; buffer_size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tag_debug_describe (*(mpack_tag_t*)$tag, (char*)$buffer, (size_t)$buffer_size);
			]"
		end

	c_mpack_print_append (a_print: POINTER; data: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_print_append ((mpack_print_t*)$a_print, (char const*)$data, (size_t)$count);
			]"
		end

	c_mpack_print_flush (a_print: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_print_flush ((mpack_print_t*)$a_print);
			]"
		end

	c_mpack_print_file_callback (context: POINTER; data: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_print_file_callback ((void*)$context, (char const*)$data, (size_t)$count);
			]"
		end

	c_mpack_writer_track_push (writer: POINTER; type: INTEGER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_track_push ((mpack_writer_t*)$writer, (mpack_type_t)$type, (uint32_t)$count);
			]"
		end

	c_mpack_writer_track_pop (writer: POINTER; type: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_track_pop ((mpack_writer_t*)$writer, (mpack_type_t)$type);
			]"
		end

	c_mpack_writer_track_element (writer: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_track_element ((mpack_writer_t*)$writer);
			]"
		end

	c_mpack_writer_track_bytes (writer: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_track_bytes ((mpack_writer_t*)$writer, (size_t)$count);
			]"
		end

	c_mpack_writer_init (writer: POINTER; buffer: POINTER; size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_init ((mpack_writer_t*)$writer, (char*)$buffer, (size_t)$size);
			]"
		end

	c_mpack_writer_init_growable (writer: POINTER; data: POINTER; size: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_init_growable ((mpack_writer_t*)$writer, (char**)$data, (size_t*)$size);
			]"
		end

	c_mpack_writer_init_error (writer: POINTER; error: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_init_error ((mpack_writer_t*)$writer, (mpack_error_t)$error);
			]"
		end

	c_mpack_writer_init_filename (writer: POINTER; filename: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_init_filename ((mpack_writer_t*)$writer, (char const*)$filename);
			]"
		end

	c_mpack_writer_init_stdfile (writer: POINTER; stdfile: POINTER; close_when_done: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_init_stdfile ((mpack_writer_t*)$writer, (FILE*)$stdfile, (_Bool)$close_when_done);
			]"
		end

	c_mpack_writer_destroy (writer: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_writer_destroy ((mpack_writer_t*)$writer);
			]"
		end

	c_mpack_writer_set_flush (writer: POINTER; flush: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_set_flush ((mpack_writer_t*)$writer, (mpack_writer_flush_t)$flush);
			]"
		end

	c_mpack_writer_flush_message (writer: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_flush_message ((mpack_writer_t*)$writer);
			]"
		end

	c_mpack_writer_flag_error (writer: POINTER; error: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_writer_flag_error ((mpack_writer_t*)$writer, (mpack_error_t)$error);
			]"
		end

	c_mpack_write_tag (writer: POINTER; tag: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_tag ((mpack_writer_t*)$writer, *(mpack_tag_t*)$tag);
			]"
		end

	c_mpack_write_i8 (writer: POINTER; value: CHARACTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_i8 ((mpack_writer_t*)$writer, (int8_t)$value);
			]"
		end

	c_mpack_write_i16 (writer: POINTER; value: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_i16 ((mpack_writer_t*)$writer, (int16_t)$value);
			]"
		end

	c_mpack_write_i32 (writer: POINTER; value: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_i32 ((mpack_writer_t*)$writer, (int32_t)$value);
			]"
		end

	c_mpack_write_i64 (writer: POINTER; value: INTEGER_64)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_i64 ((mpack_writer_t*)$writer, (int64_t)$value);
			]"
		end

	c_mpack_write_u8 (writer: POINTER; value: CHARACTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_u8 ((mpack_writer_t*)$writer, (uint8_t)$value);
			]"
		end

	c_mpack_write_u16 (writer: POINTER; value: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_u16 ((mpack_writer_t*)$writer, (uint16_t)$value);
			]"
		end

	c_mpack_write_u32 (writer: POINTER; value: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_u32 ((mpack_writer_t*)$writer, (uint32_t)$value);
			]"
		end

	c_mpack_write_u64 (writer: POINTER; value: NATURAL_64)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_u64 ((mpack_writer_t*)$writer, (uint64_t)$value);
			]"
		end

	c_mpack_write_float (writer: POINTER; value: REAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_float ((mpack_writer_t*)$writer, (float)$value);
			]"
		end

	c_mpack_write_double (writer: POINTER; value: REAL_64)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_double ((mpack_writer_t*)$writer, (double)$value);
			]"
		end

	c_mpack_write_bool (writer: POINTER; value: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_bool ((mpack_writer_t*)$writer, (_Bool)$value);
			]"
		end

	c_mpack_write_true (writer: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_true ((mpack_writer_t*)$writer);
			]"
		end

	c_mpack_write_false (writer: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_false ((mpack_writer_t*)$writer);
			]"
		end

	c_mpack_write_nil (writer: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_nil ((mpack_writer_t*)$writer);
			]"
		end

	c_mpack_write_object_bytes (writer: POINTER; data: POINTER; bytes: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_object_bytes ((mpack_writer_t*)$writer, (char const*)$data, (size_t)$bytes);
			]"
		end

	c_mpack_start_array (writer: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_start_array ((mpack_writer_t*)$writer, (uint32_t)$count);
			]"
		end

	c_mpack_start_map (writer: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_start_map ((mpack_writer_t*)$writer, (uint32_t)$count);
			]"
		end

	c_mpack_write_str (writer: POINTER; str: POINTER; length: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_str ((mpack_writer_t*)$writer, (char const*)$str, (uint32_t)$length);
			]"
		end

	c_mpack_write_utf8 (writer: POINTER; str: POINTER; length: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_utf8 ((mpack_writer_t*)$writer, (char const*)$str, (uint32_t)$length);
			]"
		end

	c_mpack_write_cstr (writer: POINTER; cstr: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_cstr ((mpack_writer_t*)$writer, (char const*)$cstr);
			]"
		end

	c_mpack_write_cstr_or_nil (writer: POINTER; cstr: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_cstr_or_nil ((mpack_writer_t*)$writer, (char const*)$cstr);
			]"
		end

	c_mpack_write_utf8_cstr (writer: POINTER; cstr: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_utf8_cstr ((mpack_writer_t*)$writer, (char const*)$cstr);
			]"
		end

	c_mpack_write_utf8_cstr_or_nil (writer: POINTER; cstr: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_utf8_cstr_or_nil ((mpack_writer_t*)$writer, (char const*)$cstr);
			]"
		end

	c_mpack_write_bin (writer: POINTER; data: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_bin ((mpack_writer_t*)$writer, (char const*)$data, (uint32_t)$count);
			]"
		end

	c_mpack_start_str (writer: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_start_str ((mpack_writer_t*)$writer, (uint32_t)$count);
			]"
		end

	c_mpack_start_bin (writer: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_start_bin ((mpack_writer_t*)$writer, (uint32_t)$count);
			]"
		end

	c_mpack_write_bytes (writer: POINTER; data: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_write_bytes ((mpack_writer_t*)$writer, (char const*)$data, (size_t)$count);
			]"
		end

	c_mpack_reader_init (reader: POINTER; buffer: POINTER; size: NATURAL; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_reader_init ((mpack_reader_t*)$reader, (char*)$buffer, (size_t)$size, (size_t)$count);
			]"
		end

	c_mpack_reader_init_error (reader: POINTER; error: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_reader_init_error ((mpack_reader_t*)$reader, (mpack_error_t)$error);
			]"
		end

	c_mpack_reader_init_data (reader: POINTER; data: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_reader_init_data ((mpack_reader_t*)$reader, (char const*)$data, (size_t)$count);
			]"
		end

	c_mpack_reader_init_filename (reader: POINTER; filename: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_reader_init_filename ((mpack_reader_t*)$reader, (char const*)$filename);
			]"
		end

	c_mpack_reader_init_stdfile (reader: POINTER; stdfile: POINTER; close_when_done: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_reader_init_stdfile ((mpack_reader_t*)$reader, (FILE*)$stdfile, (_Bool)$close_when_done);
			]"
		end

	c_mpack_reader_destroy (reader: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_reader_destroy ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_reader_set_fill (reader: POINTER; fill: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_reader_set_fill ((mpack_reader_t*)$reader, (mpack_reader_fill_t)$fill);
			]"
		end

	c_mpack_reader_set_skip (reader: POINTER; skip: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_reader_set_skip ((mpack_reader_t*)$reader, (mpack_reader_skip_t)$skip);
			]"
		end

	c_mpack_reader_flag_error (reader: POINTER; error: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_reader_flag_error ((mpack_reader_t*)$reader, (mpack_error_t)$error);
			]"
		end

	c_mpack_reader_remaining (reader: POINTER; data: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_reader_remaining ((mpack_reader_t*)$reader, (char const**)$data);
			]"
		end

	c_mpack_read_tag (reader: POINTER): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_tag_t *result = (mpack_tag_t*) malloc (sizeof(mpack_tag_t));
				*result = mpack_read_tag ((mpack_reader_t*)$reader);
				return result;
			]"
		end

	c_mpack_peek_tag (reader: POINTER): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_tag_t *result = (mpack_tag_t*) malloc (sizeof(mpack_tag_t));
				*result = mpack_peek_tag ((mpack_reader_t*)$reader);
				return result;
			]"
		end

	c_mpack_skip_bytes (reader: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_skip_bytes ((mpack_reader_t*)$reader, (size_t)$count);
			]"
		end

	c_mpack_read_bytes (reader: POINTER; p: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_read_bytes ((mpack_reader_t*)$reader, (char*)$p, (size_t)$count);
			]"
		end

	c_mpack_read_utf8 (reader: POINTER; p: POINTER; byte_count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_read_utf8 ((mpack_reader_t*)$reader, (char*)$p, (size_t)$byte_count);
			]"
		end

	c_mpack_read_cstr (reader: POINTER; buf: POINTER; buffer_size: NATURAL; byte_count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_read_cstr ((mpack_reader_t*)$reader, (char*)$buf, (size_t)$buffer_size, (size_t)$byte_count);
			]"
		end

	c_mpack_read_utf8_cstr (reader: POINTER; buf: POINTER; buffer_size: NATURAL; byte_count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_read_utf8_cstr ((mpack_reader_t*)$reader, (char*)$buf, (size_t)$buffer_size, (size_t)$byte_count);
			]"
		end

	c_mpack_read_bytes_alloc_impl (reader: POINTER; count: NATURAL; null_terminated: INTEGER): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_read_bytes_alloc_impl ((mpack_reader_t*)$reader, (size_t)$count, (_Bool)$null_terminated);
			]"
		end

	c_mpack_read_bytes_inplace (reader: POINTER; count: NATURAL): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_read_bytes_inplace ((mpack_reader_t*)$reader, (size_t)$count);
			]"
		end

	c_mpack_read_utf8_inplace (reader: POINTER; count: NATURAL): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_read_utf8_inplace ((mpack_reader_t*)$reader, (size_t)$count);
			]"
		end

	c_mpack_done_type (reader: POINTER; type: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_done_type ((mpack_reader_t*)$reader, (mpack_type_t)$type);
			]"
		end

	c_mpack_discard (reader: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_discard ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_print_data_to_callback (data: POINTER; size: NATURAL; callback: POINTER; context: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_print_data_to_callback ((char const*)$data, (size_t)$size, (mpack_print_callback_t)$callback, (void*)$context);
			]"
		end

	c_mpack_print_data_to_file (data: POINTER; len: NATURAL; file: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_print_data_to_file ((char const*)$data, (size_t)$len, (FILE*)$file);
			]"
		end

	c_mpack_print_stdfile_to_callback (file: POINTER; callback: POINTER; context: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_print_stdfile_to_callback ((FILE*)$file, (mpack_print_callback_t)$callback, (void*)$context);
			]"
		end

	c_mpack_expect_u8 (reader: POINTER): CHARACTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_u8 ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_u16 (reader: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_u16 ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_u32 (reader: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_u32 ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_u64 (reader: POINTER): NATURAL_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_u64 ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_i8 (reader: POINTER): CHARACTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_i8 ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_i16 (reader: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_i16 ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_i32 (reader: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_i32 ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_i64 (reader: POINTER): INTEGER_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_i64 ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_float (reader: POINTER): REAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_float ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_double (reader: POINTER): REAL_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_double ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_float_strict (reader: POINTER): REAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_float_strict ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_double_strict (reader: POINTER): REAL_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_double_strict ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_u8_range (reader: POINTER; min_value: CHARACTER; max_value: CHARACTER): CHARACTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_u8_range ((mpack_reader_t*)$reader, (uint8_t)$min_value, (uint8_t)$max_value);
			]"
		end

	c_mpack_expect_u16_range (reader: POINTER; min_value: NATURAL; max_value: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_u16_range ((mpack_reader_t*)$reader, (uint16_t)$min_value, (uint16_t)$max_value);
			]"
		end

	c_mpack_expect_u32_range (reader: POINTER; min_value: NATURAL; max_value: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_u32_range ((mpack_reader_t*)$reader, (uint32_t)$min_value, (uint32_t)$max_value);
			]"
		end

	c_mpack_expect_u64_range (reader: POINTER; min_value: NATURAL_64; max_value: NATURAL_64): NATURAL_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_u64_range ((mpack_reader_t*)$reader, (uint64_t)$min_value, (uint64_t)$max_value);
			]"
		end

	c_mpack_expect_i8_range (reader: POINTER; min_value: CHARACTER; max_value: CHARACTER): CHARACTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_i8_range ((mpack_reader_t*)$reader, (int8_t)$min_value, (int8_t)$max_value);
			]"
		end

	c_mpack_expect_i16_range (reader: POINTER; min_value: INTEGER; max_value: INTEGER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_i16_range ((mpack_reader_t*)$reader, (int16_t)$min_value, (int16_t)$max_value);
			]"
		end

	c_mpack_expect_i32_range (reader: POINTER; min_value: INTEGER; max_value: INTEGER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_i32_range ((mpack_reader_t*)$reader, (int32_t)$min_value, (int32_t)$max_value);
			]"
		end

	c_mpack_expect_i64_range (reader: POINTER; min_value: INTEGER_64; max_value: INTEGER_64): INTEGER_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_i64_range ((mpack_reader_t*)$reader, (int64_t)$min_value, (int64_t)$max_value);
			]"
		end

	c_mpack_expect_float_range (reader: POINTER; min_value: REAL; max_value: REAL): REAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_float_range ((mpack_reader_t*)$reader, (float)$min_value, (float)$max_value);
			]"
		end

	c_mpack_expect_double_range (reader: POINTER; min_value: REAL_64; max_value: REAL_64): REAL_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_double_range ((mpack_reader_t*)$reader, (double)$min_value, (double)$max_value);
			]"
		end

	c_mpack_expect_uint_match (reader: POINTER; value: NATURAL_64)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_uint_match ((mpack_reader_t*)$reader, (uint64_t)$value);
			]"
		end

	c_mpack_expect_int_match (reader: POINTER; value: INTEGER_64)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_int_match ((mpack_reader_t*)$reader, (int64_t)$value);
			]"
		end

	c_mpack_expect_nil (reader: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_nil ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_bool (reader: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_bool ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_true (reader: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_true ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_false (reader: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_false ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_map (reader: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_map ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_map_range (reader: POINTER; min_count: NATURAL; max_count: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_map_range ((mpack_reader_t*)$reader, (uint32_t)$min_count, (uint32_t)$max_count);
			]"
		end

	c_mpack_expect_map_match (reader: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_map_match ((mpack_reader_t*)$reader, (uint32_t)$count);
			]"
		end

	c_mpack_expect_map_or_nil (reader: POINTER; count: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_map_or_nil ((mpack_reader_t*)$reader, (uint32_t*)$count);
			]"
		end

	c_mpack_expect_map_max_or_nil (reader: POINTER; max_count: NATURAL; count: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_map_max_or_nil ((mpack_reader_t*)$reader, (uint32_t)$max_count, (uint32_t*)$count);
			]"
		end

	c_mpack_expect_array (reader: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_array ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_array_range (reader: POINTER; min_count: NATURAL; max_count: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_array_range ((mpack_reader_t*)$reader, (uint32_t)$min_count, (uint32_t)$max_count);
			]"
		end

	c_mpack_expect_array_match (reader: POINTER; count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_array_match ((mpack_reader_t*)$reader, (uint32_t)$count);
			]"
		end

	c_mpack_expect_array_or_nil (reader: POINTER; count: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_array_or_nil ((mpack_reader_t*)$reader, (uint32_t*)$count);
			]"
		end

	c_mpack_expect_array_max_or_nil (reader: POINTER; max_count: NATURAL; count: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_array_max_or_nil ((mpack_reader_t*)$reader, (uint32_t)$max_count, (uint32_t*)$count);
			]"
		end

	c_mpack_expect_array_alloc_impl (reader: POINTER; element_size: NATURAL; max_count: NATURAL; out_count: POINTER; allow_nil: INTEGER): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_array_alloc_impl ((mpack_reader_t*)$reader, (size_t)$element_size, (uint32_t)$max_count, (uint32_t*)$out_count, (_Bool)$allow_nil);
			]"
		end

	c_mpack_expect_str (reader: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_str ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_str_buf (reader: POINTER; buf: POINTER; bufsize: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_str_buf ((mpack_reader_t*)$reader, (char*)$buf, (size_t)$bufsize);
			]"
		end

	c_mpack_expect_utf8 (reader: POINTER; buf: POINTER; bufsize: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_utf8 ((mpack_reader_t*)$reader, (char*)$buf, (size_t)$bufsize);
			]"
		end

	c_mpack_expect_str_match (reader: POINTER; str: POINTER; length: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_str_match ((mpack_reader_t*)$reader, (char const*)$str, (size_t)$length);
			]"
		end

	c_mpack_expect_cstr (reader: POINTER; buf: POINTER; size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_cstr ((mpack_reader_t*)$reader, (char*)$buf, (size_t)$size);
			]"
		end

	c_mpack_expect_utf8_cstr (reader: POINTER; buf: POINTER; size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_utf8_cstr ((mpack_reader_t*)$reader, (char*)$buf, (size_t)$size);
			]"
		end

	c_mpack_expect_cstr_alloc (reader: POINTER; maxsize: NATURAL): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_cstr_alloc ((mpack_reader_t*)$reader, (size_t)$maxsize);
			]"
		end

	c_mpack_expect_utf8_cstr_alloc (reader: POINTER; maxsize: NATURAL): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_utf8_cstr_alloc ((mpack_reader_t*)$reader, (size_t)$maxsize);
			]"
		end

	c_mpack_expect_bin (reader: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_bin ((mpack_reader_t*)$reader);
			]"
		end

	c_mpack_expect_bin_buf (reader: POINTER; buf: POINTER; size: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_bin_buf ((mpack_reader_t*)$reader, (char*)$buf, (size_t)$size);
			]"
		end

	c_mpack_expect_bin_size_buf (reader: POINTER; buf: POINTER; size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_bin_size_buf ((mpack_reader_t*)$reader, (char*)$buf, (uint32_t)$size);
			]"
		end

	c_mpack_expect_bin_alloc (reader: POINTER; maxsize: NATURAL; size: POINTER): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_bin_alloc ((mpack_reader_t*)$reader, (size_t)$maxsize, (size_t*)$size);
			]"
		end

	c_mpack_expect_tag (reader: POINTER; tag: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_expect_tag ((mpack_reader_t*)$reader, *(mpack_tag_t*)$tag);
			]"
		end

	c_mpack_expect_enum (reader: POINTER; strings: POINTER; count: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_enum ((mpack_reader_t*)$reader, $strings, (size_t)$count);
			]"
		end

	c_mpack_expect_enum_optional (reader: POINTER; strings: POINTER; count: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_enum_optional ((mpack_reader_t*)$reader, $strings, (size_t)$count);
			]"
		end

	c_mpack_expect_key_uint (reader: POINTER; found: POINTER; count: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_key_uint ((mpack_reader_t*)$reader, $found, (size_t)$count);
			]"
		end

	c_mpack_expect_key_cstr (reader: POINTER; keys: POINTER; found: POINTER; count: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_expect_key_cstr ((mpack_reader_t*)$reader, $keys, $found, (size_t)$count);
			]"
		end

	c_mpack_tree_init_data (tree: POINTER; data: POINTER; length: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tree_init_data ((mpack_tree_t*)$tree, (char const*)$data, (size_t)$length);
			]"
		end

	c_mpack_tree_init_stream (tree: POINTER; read_fn: POINTER; context: POINTER; max_message_size: NATURAL; max_message_nodes: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tree_init_stream ((mpack_tree_t*)$tree, (mpack_tree_read_t)$read_fn, (void*)$context, (size_t)$max_message_size, (size_t)$max_message_nodes);
			]"
		end

	c_mpack_tree_init_pool (tree: POINTER; data: POINTER; length: NATURAL; node_pool: POINTER; node_pool_count: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tree_init_pool ((mpack_tree_t*)$tree, (char const*)$data, (size_t)$length, (mpack_node_data_t*)$node_pool, (size_t)$node_pool_count);
			]"
		end

	c_mpack_tree_init_error (tree: POINTER; error: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tree_init_error ((mpack_tree_t*)$tree, (mpack_error_t)$error);
			]"
		end

	c_mpack_tree_init_filename (tree: POINTER; filename: POINTER; max_bytes: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tree_init_filename ((mpack_tree_t*)$tree, (char const*)$filename, (size_t)$max_bytes);
			]"
		end

	c_mpack_tree_init_stdfile (tree: POINTER; stdfile: POINTER; max_bytes: NATURAL; close_when_done: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tree_init_stdfile ((mpack_tree_t*)$tree, (FILE*)$stdfile, (size_t)$max_bytes, (_Bool)$close_when_done);
			]"
		end

	c_mpack_tree_set_limits (tree: POINTER; max_message_size: NATURAL; max_message_nodes: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tree_set_limits ((mpack_tree_t*)$tree, (size_t)$max_message_size, (size_t)$max_message_nodes);
			]"
		end

	c_mpack_tree_parse (tree: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tree_parse ((mpack_tree_t*)$tree);
			]"
		end

	c_mpack_tree_try_parse (tree: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_tree_try_parse ((mpack_tree_t*)$tree);
			]"
		end

	c_mpack_tree_root (tree: POINTER): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_tree_root ((mpack_tree_t*)$tree);
				return result;
			]"
		end

	c_mpack_tree_destroy (tree: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_tree_destroy ((mpack_tree_t*)$tree);
			]"
		end

	c_mpack_tree_flag_error (tree: POINTER; error: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_tree_flag_error ((mpack_tree_t*)$tree, (mpack_error_t)$error);
			]"
		end

	c_mpack_node_flag_error (node: POINTER; error: INTEGER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_flag_error (*(mpack_node_t*)$node, (mpack_error_t)$error);
			]"
		end

	c_mpack_node_tag (node: POINTER): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_tag_t *result = (mpack_tag_t*) malloc (sizeof(mpack_tag_t));
				*result = mpack_node_tag (*(mpack_node_t*)$node);
				return result;
			]"
		end

	c_mpack_node_print_to_buffer (node: POINTER; buffer: POINTER; buffer_size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_print_to_buffer (*(mpack_node_t*)$node, (char*)$buffer, (size_t)$buffer_size);
			]"
		end

	c_mpack_node_print_to_callback (node: POINTER; callback: POINTER; context: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_print_to_callback (*(mpack_node_t*)$node, (mpack_print_callback_t)$callback, (void*)$context);
			]"
		end

	c_mpack_node_print_to_file (node: POINTER; file: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_print_to_file (*(mpack_node_t*)$node, (FILE*)$file);
			]"
		end

	c_mpack_node_type (node: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_type (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_is_nil (node: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_is_nil (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_is_missing (node: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_is_missing (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_nil (node: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_nil (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_missing (node: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_missing (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_bool (node: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_bool (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_true (node: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_true (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_false (node: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_false (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_u8 (node: POINTER): CHARACTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_u8 (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_i8 (node: POINTER): CHARACTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_i8 (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_u16 (node: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_u16 (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_i16 (node: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_i16 (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_u32 (node: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_u32 (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_i32 (node: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_i32 (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_u64 (node: POINTER): NATURAL_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_u64 (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_i64 (node: POINTER): INTEGER_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_i64 (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_uint (node: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_uint (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_int (node: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_int (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_float (node: POINTER): REAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_float (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_double (node: POINTER): REAL_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_double (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_float_strict (node: POINTER): REAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_float_strict (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_double_strict (node: POINTER): REAL_64
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_double_strict (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_check_utf8 (node: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_check_utf8 (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_check_utf8_cstr (node: POINTER)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_check_utf8_cstr (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_bin_size (node: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_bin_size (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_data_len (node: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_data_len (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_strlen (node: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_strlen (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_str (node: POINTER): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_str (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_data (node: POINTER): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_data (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_bin_data (node: POINTER): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_bin_data (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_copy_data (node: POINTER; buffer: POINTER; bufsize: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_copy_data (*(mpack_node_t*)$node, (char*)$buffer, (size_t)$bufsize);
			]"
		end

	c_mpack_node_copy_utf8 (node: POINTER; buffer: POINTER; bufsize: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_copy_utf8 (*(mpack_node_t*)$node, (char*)$buffer, (size_t)$bufsize);
			]"
		end

	c_mpack_node_copy_cstr (node: POINTER; buffer: POINTER; size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_copy_cstr (*(mpack_node_t*)$node, (char*)$buffer, (size_t)$size);
			]"
		end

	c_mpack_node_copy_utf8_cstr (node: POINTER; buffer: POINTER; size: NATURAL)
		external
			"C inline use <mpack.h>"
		alias
			"[
				mpack_node_copy_utf8_cstr (*(mpack_node_t*)$node, (char*)$buffer, (size_t)$size);
			]"
		end

	c_mpack_node_data_alloc (node: POINTER; maxsize: NATURAL): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_data_alloc (*(mpack_node_t*)$node, (size_t)$maxsize);
			]"
		end

	c_mpack_node_cstr_alloc (node: POINTER; maxsize: NATURAL): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_cstr_alloc (*(mpack_node_t*)$node, (size_t)$maxsize);
			]"
		end

	c_mpack_node_utf8_cstr_alloc (node: POINTER; maxsize: NATURAL): POINTER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_utf8_cstr_alloc (*(mpack_node_t*)$node, (size_t)$maxsize);
			]"
		end

	c_mpack_node_enum (node: POINTER; strings: POINTER; count: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_enum (*(mpack_node_t*)$node, $strings, (size_t)$count);
			]"
		end

	c_mpack_node_enum_optional (node: POINTER; strings: POINTER; count: NATURAL): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_enum_optional (*(mpack_node_t*)$node, $strings, (size_t)$count);
			]"
		end

	c_mpack_node_array_length (node: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_array_length (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_array_at (node: POINTER; index: NATURAL): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_array_at (*(mpack_node_t*)$node, (size_t)$index);
				return result;
			]"
		end

	c_mpack_node_map_count (node: POINTER): NATURAL
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_map_count (*(mpack_node_t*)$node);
			]"
		end

	c_mpack_node_map_key_at (node: POINTER; index: NATURAL): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_key_at (*(mpack_node_t*)$node, (size_t)$index);
				return result;
			]"
		end

	c_mpack_node_map_value_at (node: POINTER; index: NATURAL): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_value_at (*(mpack_node_t*)$node, (size_t)$index);
				return result;
			]"
		end

	c_mpack_node_map_int (node: POINTER; num: INTEGER_64): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_int (*(mpack_node_t*)$node, (int64_t)$num);
				return result;
			]"
		end

	c_mpack_node_map_int_optional (node: POINTER; num: INTEGER_64): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_int_optional (*(mpack_node_t*)$node, (int64_t)$num);
				return result;
			]"
		end

	c_mpack_node_map_uint (node: POINTER; num: NATURAL_64): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_uint (*(mpack_node_t*)$node, (uint64_t)$num);
				return result;
			]"
		end

	c_mpack_node_map_uint_optional (node: POINTER; num: NATURAL_64): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_uint_optional (*(mpack_node_t*)$node, (uint64_t)$num);
				return result;
			]"
		end

	c_mpack_node_map_str (node: POINTER; str: POINTER; length: NATURAL): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_str (*(mpack_node_t*)$node, (char const*)$str, (size_t)$length);
				return result;
			]"
		end

	c_mpack_node_map_str_optional (node: POINTER; str: POINTER; length: NATURAL): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_str_optional (*(mpack_node_t*)$node, (char const*)$str, (size_t)$length);
				return result;
			]"
		end

	c_mpack_node_map_cstr (node: POINTER; cstr: POINTER): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_cstr (*(mpack_node_t*)$node, (char const*)$cstr);
				return result;
			]"
		end

	c_mpack_node_map_cstr_optional (node: POINTER; cstr: POINTER): POINTER
		external
			"C inline use <mpack.h>"

		alias
			"[
				mpack_node_t *result = (mpack_node_t*) malloc (sizeof(mpack_node_t));
				*result = mpack_node_map_cstr_optional (*(mpack_node_t*)$node, (char const*)$cstr);
				return result;
			]"
		end

	c_mpack_node_map_contains_int (node: POINTER; num: INTEGER_64): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_map_contains_int (*(mpack_node_t*)$node, (int64_t)$num);
			]"
		end

	c_mpack_node_map_contains_uint (node: POINTER; num: NATURAL_64): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_map_contains_uint (*(mpack_node_t*)$node, (uint64_t)$num);
			]"
		end

	c_mpack_node_map_contains_str (node: POINTER; str: POINTER; length: NATURAL): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_map_contains_str (*(mpack_node_t*)$node, (char const*)$str, (size_t)$length);
			]"
		end

	c_mpack_node_map_contains_cstr (node: POINTER; cstr: POINTER): INTEGER
		external
			"C inline use <mpack.h>"
		alias
			"[
				return mpack_node_map_contains_cstr (*(mpack_node_t*)$node, (char const*)$cstr);
			]"
		end

feature -- Externals Address

end
